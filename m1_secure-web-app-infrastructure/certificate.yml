AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating an SSL/TLS certificate

Parameters:
  DomainName:
    Type: String
    Description: The domain name for the certificate (e.g., example.com)
    Default: www.mymvp.me
Resources:
  HostedZoneLookupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib3
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def send_cfnresponse(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
              responseUrl = event['ResponseURL']
              responseBody = {
                  'Status': responseStatus,
                  'Reason': f'See the details in CloudWatch Log Stream: {context.log_stream_name}',
                  'PhysicalResourceId': physicalResourceId or context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'NoEcho': noEcho,
                  'Data': responseData
              }
              json_responseBody = json.dumps(responseBody)
              headers = {
                  'content-type': '',
                  'content-length': str(len(json_responseBody))
              }
              http = urllib3.PoolManager()
              response = http.request('PUT', responseUrl, body=json_responseBody, headers=headers)
              logger.info(f"CFN response status: {response.status}")

          def handler(event, context):
              try:
                  logger.info(f"Received event: {json.dumps(event)}")
                  client = boto3.client('route53')
                  domain_name = 'mymvp.me'
                  if '.mymvp.me' in event['ResourceProperties']['DomainName']:
                      domain_name = 'mymvp.me'
                  logger.info(f"Looking up hosted zone for domain: {domain_name}")
                  response = client.list_hosted_zones_by_name(DNSName=domain_name)
                  hosted_zone_id = response['HostedZones'][0]['Id'].split('/')[-1]
                  logger.info(f"Response: {response}")
                  logger.info(f"Hosted Zone ID: {hosted_zone_id}")
                  send_cfnresponse(event, context, 'SUCCESS', {'HostedZoneId': hosted_zone_id})
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  send_cfnresponse(event, context, 'FAILED', {'Message': str(e)})


      Runtime: python3.8

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::Region}-Route53Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - route53:ListHostedZonesByName
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  HostedZoneLookup:
    Type: Custom::HostedZoneLookup
    Properties:
      ServiceToken: !GetAtt HostedZoneLookupFunction.Arn
      DomainName: !Ref DomainName

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !GetAtt HostedZoneLookup.HostedZoneId

Outputs:
  CertificateArn:
    Description: ARN of the SSL/TLS certificate
    Export:
      Name: CertificateArn
    Value: !Ref Certificate
    
  DomainName:
    Description: Domain name for the application
    Export:
      Name: ApplicationDomainName
    Value: !Ref DomainName
    
  HostedZoneId:
    Description: Route 53 Hosted Zone ID
    Export:
      Name: ApplicationHostedZoneId
    Value: !GetAtt HostedZoneLookup.HostedZoneId
